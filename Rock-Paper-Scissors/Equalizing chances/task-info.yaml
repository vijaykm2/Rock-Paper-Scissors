type: edu
custom_name: stage2
files:
- name: rps/game.py
  visible: true
  text: |
    # Write your code here
    user_choice = input()

    if user_choice == 'scissors':
        print('Sorry, but the computer chose rock')
    if user_choice == 'rock':
        print('Sorry, but the computer chose paper')
    if user_choice == 'paper':
        print('Sorry, but the computer chose scissors')
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class RPSTest(StageTest):

        def __init__(self, module_to_test: str):
            super().__init__(module_to_test)
            self.wins = 0
            self.draws = 0
            self.loses = 0

        def generate(self) -> List[TestCase]:
            options = ["rock", "paper", "scissors"]
            inputs = list()
            for option in options:
                [inputs.append(option) for _ in range(50)]
            tests = [TestCase(stdin=inp, attach=inp) for inp in inputs]
            tests.append(TestCase(stdin='rock', attach='rock', check_function=self.check_random))
            return tests

        def check_random(self, reply: str, attach) -> CheckResult:

            wrong_randomize = CheckResult.wrong("The results of the games: {} wins, {} draws and {} loses\n"
                                                "Looks like you don't use the random module to choose a random option!\n"
                                                "The number of wins, draws and loses should be approximately the same.\n"
                                                "Make sure you output the results of the games the same way as in the examples!\n"
                                                "If you are sure that you use random module try to rerun the tests!\n"
                                                .format(self.wins, self.draws, self.loses))
            if self.loses < 30:
                return wrong_randomize
            if self.draws < 30:
                return wrong_randomize
            if self.wins < 30:
                return wrong_randomize
            return CheckResult.correct()

        def check(self, reply: str, attach) -> CheckResult:

            wrong_result = CheckResult.wrong("Seems like your answer (\"{}\") is either inconsistent "
                                             "with the rock-paper-scissors rules or the string is formatted incorrectly.  "
            "Check punctuation, spelling, and capitalization of your output. "
            "Also, make sure you are following the rules of the game.".format(reply))

            hits = {
                'rock': 'scissors',
                'scissors': 'paper',
                'paper': 'rock'
            }

            computer_option = 'not found'

            if 'scissors' in reply.lower():
                computer_option = 'scissors'
            elif 'paper' in reply.lower():
                computer_option = 'paper'
            elif 'rock' in reply.lower():
                computer_option = 'rock'

            if computer_option == 'not found':
                return wrong_result

            if hits[attach] == computer_option:
                result = 'well done'
            elif attach == computer_option:
                result = 'draw'
            else:
                result = 'sorry'

            if result not in reply.lower():
                return wrong_result

            if 'sorry' in reply.lower():
                self.loses += 1
            elif 'draw' in reply.lower():
                self.draws += 1
            elif 'well done' in reply.lower():
                self.wins += 1
            else:
                return wrong_result

            return CheckResult.correct()


    RPSTest("rps.game").run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/78/stages/432/implement
status: Failed
feedback:
  message: |-
    Exception in test #1

    Probably your program run out of input (tried to read more than expected)

    Traceback (most recent call last):
      File "game.py", line 41, in <module>
        play_or_exit()
      File "game.py", line 36, in play_or_exit
        play_game()
      File "game.py", line 22, in play_game
        play_or_exit()
      File "game.py", line 27, in play_or_exit
        user_choice = input()
    EOFError: EOF when reading a line

    Please find below the output of your program during this failed test.
    Note that the '>' character indicates the beginning of the input line.

    ---

    > rock
    Sorry, but the computer chose paper
  time: Fri, 04 Sep 2020 04:22:15 UTC
record: 2
